class Area(Int areaId, Double latitude1, Double longitude1, Double latitude2, Double longitude2, Boolean isCriticalArea)
    Boolean hasPosition(Double lat, Double long)
        Boolean inLatitudeRange = (lat >= this.latitude1 & lat <= this.latitude2);
        Boolean inLongitudeRange = (long >= this.longitude1 & long <= this.longitude2);

        if (inLatitudeRange & inLongitudeRange) then
            return True;
        end
        return False;
    end
end

class Room(Int roomId, String name, Wall wall, Area area) end

class Door() end

class MovableEntity(Int movableEntityId, Double latitude, Double longitude, Boolean isInsideCriticalArea) end

class Wall(Door door) end


main
    Door door = new Door();
    Wall wall = new Wall(door);

    // TODO: Add to ontology instead, and access from there
    Double corner1Latitude = 59.9441196;
    Double corner1Longitude = 10.7193836;
    Double corner2Latitude = 59.9442128;
    Double corner2Longitude = 10.7194811;

    Area area = new Area(1, corner1Latitude, corner1Longitude, corner2Latitude, corner2Longitude, False);
    Area criticalArea = new Area(2, corner1Latitude, corner1Longitude, corner2Latitude, corner2Longitude, True);

    Room roomIFI = new Room(3, "IFI Study Room - Open", wall, area);
    Room criticalRoomIFI = new Room(3, "IFI Study Room - Closed", wall, criticalArea);

    List<Room> rooms = access("SELECT ?obj WHERE{ ?obj a prog:Room }");
    Int length = rooms.length();

    print("The rooms:");
    Int i = 0;
    while (i < length) do
        Room room = rooms.get(i);
        print(room.name);
        i = i + 1;
    end

    List<Double> coordinates = null;
    coordinates = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\")
        |> sort(columns: [\"_time\"], desc: true)
        |> unique(column: \"id\")
        |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));

    print("---");
    print("Creating smartphone(s) by looping over MovableEntity individuals from asset model and adding position from InfluxDB, as well as marking it to be safe or not:");
    List<Int> numSmartphones = access("SELECT ?obj WHERE{ ?a a domain:MovableEntity . ?a domain:movableEntityId ?obj }");
    Int lengthSmartphones = numSmartphones.length();
    length = coordinates.length();
    Int half = length / 2;
    i = 0;
    while (i < half) do
        Double lat = coordinates.get(half + i);
        Double long = coordinates.get(i);

        Int index = half - i;
        Int id = numSmartphones.get(index - 1);

        Boolean isInside = criticalArea.hasPosition(lat, long);
        MovableEntity smartphone = null;
        if (isInside) then
            smartphone = new MovableEntity(id, lat, long, True);
        else
            smartphone = new MovableEntity(id, lat, long, False);
        end
        
        i = i + 1;
    end

    print("---");
    print("Printing the smartphone(s) as instance(s) of prog:MovableEntity:");
    List<MovableEntity> smartphones = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity }");
    length = smartphones.length();
    i = 0;
    while (i < length) do
        MovableEntity m = smartphones.get(i);

        print(m.movableEntityId);
        print(m.latitude);
        print(m.longitude);
        print(m.isInsideCriticalArea);

        i = i + 1;
    end

    //print("---");
    //print("Can check if smartphone(s) are inside critical area:");
    //i = 0;
    //while(i < length) do
    //    breakpoint; 
    //    Boolean insideCriticalArea = False;
    //    if (insideCriticalArea) then
    //        print("Inside critical area!");
    //        // TODO: Mark smartphone as being inside critical area
    //    else
    //        print("Safe");
    //    end
    //end

    
    print("---");
    print("Validating SHACL shapes..");
    Boolean validation = validate("output.ttl");

    print(validation);

end