class Area(Int areaId, Coordinate corner1, Coordinate corner2, Boolean isCriticalArea, Room room1, Room room2) end

class Room(Int roomId, String name, Coordinate corner1, Coordinate corner2, Double sideLength, Wall wall) end

class Door() end

class MovableEntity(Int movableEntityId, Coordinate position) end

class Wall(Door door) end

class Coordinate(Double latitude, Double longitude) end



main
    // Illustrating an area with two rooms, separated by a wall with a door in it.
    //  _ _ _ _ _ _ _
    // |     | |     | 
    // |      -      |
    // |     | |     |
    //  - - - - - - - 

    Coordinate areaCorner1 = new Coordinate(0.0, 0.0);
    Coordinate areaCorner2 = new Coordinate(5.0, 11.0);
    Coordinate room1Corner2 = new Coordinate(5.0, 5.0);
    Coordinate room2Corner1 = new Coordinate(0.0, 5.0);
    
    Door door = new Door();
    Wall wall = new Wall(door);

    Room room1 = new Room(1, "Livingroom", areaCorner1, room1Corner2, 5.0, wall);
    Room room2 = new Room(2, "Bathroom", room2Corner1, areaCorner2, 5.0, wall);

    Area area = new Area(1, areaCorner1, areaCorner2, False, room1, room2);

    Coordinate smartphone1Coordinate = new Coordinate(1.0, 1.0);
    Coordinate smartphone2Coordinate = new Coordinate(10.0, 4.0);
    MovableEntity smartphone1 = new MovableEntity(1, smartphone1Coordinate);
    MovableEntity smartphone2 = new MovableEntity(2, smartphone2Coordinate);

    List<Room> rooms = access("SELECT ?obj WHERE{ ?obj a prog:Room }");
    Int length = rooms.length();

    Int i = 0;
    while (i < length) do
        Room room = rooms.get(i);
        print(room.name);
        i = i + 1;
    end

    List<Double> statusList = access(
    "from(bucket: \"Data\")
        |> range(start: -24h)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\")
        |> filter(fn: (r) => r[\"id\"] == \"1\")
        |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));

    Int length = statusList.length();
    i = 0;
    while (i < length) do
        Double next = statusList.get(i);
        print(next);
        i = i + 1;
    end

end