class Area(Int areaId, Boolean isCriticalArea, Double latitude1, Double latitude2, Double longitude1, Double longitude2)
    Boolean hasPosition(Double lat, Double long)
        Boolean inLatitudeRange = (lat >= this.latitude1) & (lat <= this.latitude2);
        Boolean inLongitudeRange = (long >= this.longitude1 & long <= this.longitude2);

        if (inLatitudeRange & inLongitudeRange) then
            return True;
        end
        
        return False;
    end
end

class Room(Int roomId, String name, Wall wall, Area area) end

class Door() end

class MovableEntity(Int movableEntityId, Double latitude, Double longitude, Boolean endangered) end

class Wall(Door door) end


main
    Door door = new Door();
    Wall wall = new Wall(door);
    
    print("1. Area(s) with coordinate(s)");
    
    // TODO: Use this when Double is accepted as Double and not String in SMOL
    /*
    List<Int> areas = access("SELECT ?obj WHERE{ ?a a domain:Area . ?a domain:areaId ?obj }");

    List<Double> corner1Lats = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:latitude1 ?obj }");
    List<Double> corner2Lats = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:latitude2 ?obj }");
    List<Double> corner1Longs = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:longitude1 ?obj }");
    List<Double> corner2Longs = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:longitude2 ?obj }");
    
    Int length = areas.length();
    Int i = 0;
    while (i < length) do
        Int id = areas.get(i);
        print(id);

        Double corner1Lat = corner1Lats.get(i);
        Double corner2Lat = corner2Lats.get(i);
        Double corner1Long = corner1Longs.get(i);
        Double corner2Long = corner2Longs.get(i);
        
        print(corner1Lat);
        print(corner2Lat);
        print(corner1Long);
        print(corner2Long);

        Area area = new Area(1, True, corner1Lat, corner2Lat, corner1Long, corner2Long);
        Room room = new Room(1, "IFI Study Room - Closed", wall, area);

        i = i + 1;
    end
    */

    Area area = new Area(1, True, 59.9441196, 59.9442128, 10.7193836, 10.7194811);
    Room room = new Room(1, "IFI Study Room - Closed", wall, area);
    print(area.areaId);
    print(area.latitude1);
    print(area.latitude2);
    print(area.longitude1);
    print(area.longitude2);



    print("---");
    print("2. The room(s):");
    List<Room> rooms = access("SELECT ?obj WHERE{ ?obj a prog:Room }");
    Int length = rooms.length();
    Int i = 0;
    while (i < length) do
        Room r = rooms.get(i);
        print(r.name);
        i = i + 1;
    end



    List<Int> smartphonesDomain = access("SELECT ?obj WHERE{ ?a a domain:MovableEntity . ?a domain:movableEntityId ?obj }");

    // Try get positions from InfluxDB
    List<Double> coordinates = null;
    coordinates = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\")
        |> sort(columns: [\"_time\"], desc: true)
        |> unique(column: \"id\")
        |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));

    if (coordinates == null) then
        print("3. Could not get positions of any smartphones from InfluxDB!");
        i = 0;
    else
        print("---");
        print("3. Creating smartphone object(s) from asset model and adding position(s) from InfluxDB:");
        
        List<Area> areaz = access("SELECT ?obj WHERE{ ?obj a prog:Area }");

        length = coordinates.length();
        Int half = length / 2;

        i = 0;
        while (i < half) do
            Double lat = coordinates.get(half + i);
            Double long = coordinates.get(i);

            Int index = half - i;
            Int id = smartphonesDomain.get(index - 1);

            MovableEntity smartphone = null;
            
            // Checking if a smartphone is already marked to be inside a critical area, in which case it shouldn't change
            Boolean isInsideACriticalArea = False;

            Int lengthAreaz = areaz.length();
            Int j = 0;
            // Checks if a smartphone is inside any of the critical areas
            while (j < lengthAreaz) do
                Area a = areaz.get(j);
                if (a.isCriticalArea & !isInsideACriticalArea) then
                    isInsideACriticalArea = a.hasPosition(lat, long);
                end
                j = j + 1;
            end

            // Marks smartphone to be inside any of the critical areas
            if (isInsideACriticalArea) then
                smartphone = new MovableEntity(id, lat, long, True);
                print(smartphone.movableEntityId);
                print("Marked to be endangered! Shouldn't be inside a critical area:");
            else
                smartphone = new MovableEntity(id, lat, long, False);
                print(smartphone.movableEntityId);
                print("Marked to be safe!");
            end

            i = i + 1;
        end // End of while loop
    end // End of else statement



    // Checking if there are more smartphones added to the asset model manually by an operator which in case the smartphones will not have a position. 
    length = smartphonesDomain.length();
    print("---");
    print("4. Printing the smartphone(s) without a position");
    while (i < length) do
        Int id2 = smartphonesDomain.get(i);
        // Endangered set to False because it can't be determined and therefore not True
        MovableEntity newSmartphone = new MovableEntity(id2, null, null, False);
        print(newSmartphone.movableEntityId);
        print(newSmartphone.latitude);
        print(newSmartphone.longitude);
        print(newSmartphone.endangered);

        i = i + 1;
    end



    print("---");
    print("5. Printing all smartphone(s) as instance(s) of prog:MovableEntity:");
    List<MovableEntity> smartphones = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity. ?obj prog:MovableEntity_movableEntityId ?id } ORDER BY DESC(?id)");
    
    length = smartphones.length();
    i = 0;
    while (i < length) do
        MovableEntity m = smartphones.get(i);
        print(m.movableEntityId);
        print(m.latitude);
        print(m.longitude);
        print(m.endangered);

        i = i + 1;
    end



    Boolean canCheck = False;
    i = 0;
    while (i < length) do
        MovableEntity movableEntity = smartphones.get(i);
        if (movableEntity.latitude != null & movableEntity.longitude != null) then
            canCheck = True;
        end
        i = i + 1;
    end

    if (canCheck) then
        print("---");
        print("6. Smartphone(s) with known position(s) that can be checked:");
        i = 0;
        while (i < length) do
            MovableEntity movableEntity2 = smartphones.get(i);
            if (movableEntity2.latitude != null & movableEntity2.longitude != null) then
                print(movableEntity2.movableEntityId);
            end
            i = i + 1;
        end
        print("query SELECT ?id ?endangered ?obj WHERE{ ?obj prog:MovableEntity_endangered true. ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_endangered ?endangered }");
    else
        print("---");
        print("6. Can query manually with SPARQL:");
    end

    /*          "Checking which smartphone(s) are in the domain"
    query SELECT ?obj WHERE{ ?obj a domain:MovableEntity }
                "Checking if smartphone 1 exists"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_movableEntityId 1 }
                "Checking which smartphone(s) are inside a critical area and displaying information about them"
    query SELECT ?id ?endangered ?obj WHERE{ ?obj prog:MovableEntity_endangered true. ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_endangered ?endangered }
                "Checking which smartphone(s) are safe"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered false }
                "Checking if smartphone 2 is endangered"
    query SELECT ?obj ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId 2. ?obj prog:MovableEntity_endangered ?endangered }
                "Checking smartphone(s), displaying everything and sorting smartphone(s) by ID"
    query SELECT ?id ?latitude ?longitude ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_latitude 
    ?latitude. ?obj prog:MovableEntity_longitude ?longitude. ?obj prog:MovableEntity_endangered ?endangered } ORDER BY ASC(?id)
                "Checking which smartphone(s) in domain we don't know are endangered or not"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered smol:null }
                "TODO: Make it possible to manually check if a smartphone is inside a critical area"
    */
    breakpoint;



    print("7. To manually check if the resulting object(s) correspond(s) with the background knowledge graph, type 'dump' and search for object(s) in 'output.ttl'!");

    print("---");
    print("8. Validating SHACL shapes..");
    Boolean validation = validate("output.ttl");
    print(validation);
end