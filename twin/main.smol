class Area(Int areaId, Double latitude1, Double longitude1, Double latitude2, Double longitude2, Boolean isCriticalArea)
    Boolean hasPosition(MovableEntity movableEntity)
        Boolean inLatitudeRange = (movableEntity.latitude >= this.latitude1 & movableEntity.latitude <= this.latitude2);
        Boolean inLongitudeRange = (movableEntity.longitude >= this.longitude1 & movableEntity.longitude <= this.longitude2);

        if (inLatitudeRange & inLongitudeRange) then
            return True;
        end
        return False;
    end
end

class Room(Int roomId, String name, Wall wall, Area area) end

class Door() end

class MovableEntity(Int movableEntityId, Double latitude, Double longitude) end

class Wall(Door door) end


main
    Door door = new Door();
    Wall wall = new Wall(door);

    Double corner1Latitude = 59.9441196;
    Double corner1Longitude = 10.7193836;
    Double corner2Latitude = 59.9442128;
    Double corner2Longitude = 10.7194811;

    Area area = new Area(1, corner1Latitude, corner1Longitude, corner2Latitude, corner2Longitude, False);
    Area criticalArea = new Area(2, corner1Latitude, corner1Longitude, corner2Latitude, corner2Longitude, True);

    Room roomIFI = new Room(3, "IFI Study Room - Open", wall, area);
    Room criticalRoomIFI = new Room(3, "IFI Study Room - Closed", wall, criticalArea);

    List<Room> rooms = access("SELECT ?obj WHERE{ ?obj a prog:Room }");
    Int length = rooms.length();

    print("The rooms:");
    Int i = 0;
    while (i < length) do
        Room room = rooms.get(i);
        print(room.name);
        i = i + 1;
    end

    // TODO: Sort by recording date
    // TODO: Only have one SPARQL query. Sorting lats and longs didn't work
    // TODO: Breakpoint in SMOL and query in terminal to check if a smartphone is in a critial area
    List<Double> lats = null;
    List<Double> longs = null;
    lats = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"latitude\")
        |> sort(columns: [\"_time\"])
        |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));
    longs = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"longitude\")
        |> sort(columns: [\"_time\"])
        |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));

    List<MovableEntity> objects = construct("SELECT ?movableEntityId ?latitude ?longitude WHERE {?a a domain:MovableEntity . ?a domain:movableEntityId ?movableEntityId . ?a domain:latitude ?latitude . ?a domain:longitude ?longitude}");
    Int numSmartphones = objects.length();

    print("---");
    print("The smartphones before adding position(s)");
    i = 0;
    while (i < numSmartphones) do
        MovableEntity next = objects.get(i);
        print(next.movableEntityId);
        print(next.latitude);
        print(next.longitude);
        i = i + 1;
    end
    print("---");

    length = lats.length();
    i = 0;

    // To add positions to asset model, can loop over smartphones from asset model gotten by SPARQL, then create smartphone objects in SMOL and add the positions gotten from InfluxDB
    while (i < numSmartphones) do
        Double latitude = lats.get(i);
        Double longitude = longs.get(i);
        
        MovableEntity newSmartphone = objects.get(i);
        newSmartphone.latitude = latitude;
        newSmartphone.longitude = longitude;
        print("ID:");
        print(newSmartphone.movableEntityId);
        print(newSmartphone.latitude);
        print(newSmartphone.longitude);

        // Test case: 1
        // The smartphone should be inside the non-critical area (room) when it's open during the day
        Boolean isInside = roomIFI.area.hasPosition(newSmartphone);
        if (isInside & !roomIFI.area.isCriticalArea) then
            print("Smartphone is inside the safe area!");
        end

        // Test case: 2 (Should print False)
        //Smartphone should be outside the critical area (room) when it's closed at night
        isInside = criticalRoomIFI.area.hasPosition(newSmartphone);
        if (!isInside & criticalRoomIFI.area.isCriticalArea) then 
            print("Smartphone is outside the critical area!"); 
        else
            print("False");
        end
        
        i = i + 1;
    end

    // Accessing all MovableEntity objects (smartphones)
    List<MovableEntity> movableEntities = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity. }");

    print("Validating SHACL shapes..");
    Boolean b = validate("output.ttl");

    print(b);

end