class Area(Int areaId, Coordinate c1, Coordinate c2, Boolean isCriticalArea)
    Boolean hasPosition(MovableEntity movableEntity)
        Boolean inLatitudeRange = (movableEntity.position.latitude >= this.c1.latitude & movableEntity.position.latitude <= this.c2.latitude);
        Boolean inLongitudeRange = (movableEntity.position.longitude >= this.c1.longitude & movableEntity.position.longitude <= this.c2.longitude);

        if (inLatitudeRange & inLongitudeRange) then
            return True;
        end
        return False;
    end
end

class Room(Int roomId, String name, Wall wall, Area area) end

class Door() end

class MovableEntity(Int movableEntityId, Coordinate position) models "a :MovableEntity"; end

class Wall(Door door) end

class Coordinate(Double latitude, Double longitude) end


main
    Coordinate c1 = new Coordinate(59.9441196, 10.7193836);
    Coordinate c2 = new Coordinate(59.9442128, 10.7194811);
    
    Door door = new Door();
    Wall wall = new Wall(door);

    Area area = new Area(1, c1, c2, False);
    Area criticalArea = new Area(2, c1, c2, True);

    Room roomIFI = new Room(3, "IFI Study Room - Open", wall, area);
    Room criticalRoomIFI = new Room(3, "IFI Study Room - Closed", wall, criticalArea);

    List<Room> rooms = access("SELECT ?obj WHERE{ ?obj a prog:Room }");
    Int length = rooms.length();

    print("The rooms:");
    Int i = 0;
    while (i < length) do
        Room room = rooms.get(i);
        print(room.name);
        i = i + 1;
    end

// TODO: Sort by recording date
// TODO: Breakpoint in SMOL and query in terminal to check if a smartphone is in a critial area
// TODO: Figure: SPARQL in SMOL > Asset Model and InfluxDB: Seperate static from dynamic (red and blue)
// TODO: Only have one SPARQL. Sorting lats and longs didn't work
    List<Double> lats = null;
    List<Double> longs = null;
    lats = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"latitude\")
        |> sort(columns: [\"_time\"])
        |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));
    longs = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"longitude\")
        |> sort(columns: [\"_time\"])
        |> aggregateWindow(every: 5m, fn: mean, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));

    print("Breakpoint:");
    breakpoint;
    // * Queries *
    // query SELECT ?obj WHERE{ ?obj a domain:MovableEntity }
    // query SELECT ?id ?latitude WHERE{ ?id rdf:type domain:MovableEntity . ?id domain:hasLatitude ?latitude . }
    // query SELECT DISTINCT ?property ?value WHERE{ domain:MovableEntity ?property ?value .}

    //List<MovableEntity> smartphones = access("SELECT ?obj WHERE{ ?obj a domain:MovableEntity }");
    //Int i = smartphones.length();
    //print("Number of smartphones:");
    //print(i);
    

    length = lats.length();
    
    i = 0;

    // To add positions to asset model, can loop over smartphones from asset model gotten by SPARQL, then create smartphone objects in SMOL and add the positions gotten from InfluxDB
    while (i < length) do
        print("Run:");
        print(i + 1);

        Double latitude = lats.get(i);
        Double longitude = longs.get(i);

        Coordinate coordinate = new Coordinate(latitude, longitude);
        MovableEntity smartphone = new MovableEntity(1, coordinate);

        // Test case: 1
        // The smartphone should be inside the non-critical area (room) when it's open during the day
        Boolean isInside = roomIFI.area.hasPosition(smartphone);
        if (isInside & !roomIFI.area.isCriticalArea) then
            print("Smartphone is inside the safe area!");
        end

        // Test case: 2 (Should print False)
        //Smartphone should be outside the critical area (room) when it's closed at night
        isInside = criticalRoomIFI.area.hasPosition(smartphone);
        if (!isInside & criticalRoomIFI.area.isCriticalArea) then 
            print("Smartphone is outside the critical area!"); 
        else
            print("False");
        end
        
        i = i + 1;
    end

    // Accessing all MovableEntity objects (smartphones)
    List<MovableEntity> movableEntities = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity. }");

    print("Validating SHACL shapes..");
    Boolean b = validate("output.ttl");

    print(b);

end