class Area(Int areaId, Boolean isCriticalArea, Double latitude1, Double latitude2, Double longitude1, Double longitude2)
    Boolean hasPosition(Double lat, Double long)
        // TODO: Fix this, it breaks because class constructor params are all Strings..
        /*
        Boolean inLatitudeRange = (lat >= this.latitude1) & (lat <= this.latitude2);
        Boolean inLongitudeRange = (long >= this.longitude1 & long <= this.longitude2);

        if (inLatitudeRange & inLongitudeRange) then
            return True;
        end
        */
        
        return False;
    end
end

class Room(Int roomId, String name, Wall wall, Area area) end

class Door() end

class MovableEntity(Int movableEntityId, Double latitude, Double longitude, Boolean endangered) end

class Wall(Door door) end


main
    Door door = new Door();
    Wall wall = new Wall(door);
    


    print("---");
    print("Area(s) with coordinate(s)");
    
    List<Int> areas = access("SELECT ?obj WHERE{ ?a a domain:Area . ?a domain:areaId ?obj }");

    List<Double> corner1Lats = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:latitude1 ?obj }");
    List<Double> corner2Lats = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:latitude2 ?obj }");
    List<Double> corner1Longs = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:longitude1 ?obj }");
    List<Double> corner2Longs = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:longitude2 ?obj }");
    
    Int length = areas.length();
    Int i = 0;
    while (i < length) do
        Int id = areas.get(i);
        print(id);

        Double corner1Lat = corner1Lats.get(i);
        Double corner2Lat = corner2Lats.get(i);
        Double corner1Long = corner1Longs.get(i);
        Double corner2Long = corner2Longs.get(i);
        
        print(corner1Lat);
        print(corner2Lat);
        print(corner1Long);
        print(corner2Long);

        Area area = new Area(id, True, corner1Lat, corner2Lat, corner1Long, corner2Long);
        Room room = new Room(id, "IFI Study Room - Closed", wall, area);

        i = i + 1;
    end



    print("---");
    print("The room(s):");
    List<Room> rooms = access("SELECT ?obj WHERE{ ?obj a prog:Room }");
    length = rooms.length();
    i = 0;
    while (i < length) do
        Room r = rooms.get(i);
        print(r.name);
        i = i + 1;
    end


    // Try get positions from InfluxDB
    List<Double> coordinates = null;

    coordinates = access(
    "from(bucket: \"Data\")
        |> range(start: 0)
        |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
        |> filter(fn: (r) => r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\")
        |> sort(columns: [\"_time\"], desc: true)
        |> unique(column: \"id\")
        |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
        |> yield(name: \"mean\")",
    INFLUXDB("influx.yml"));

    // TODO: Move functionality not affected by coordinates being 'null' outside scope
    if (coordinates == null) then
        print("Could not get positions of any smartphones from InfluxDB!");
    else
        print("---");
        print("Creating smartphone object(s) from asset model and adding position(s) from InfluxDB:");
        List<Int> numSmartphonesDomain = access("SELECT ?obj WHERE{ ?a a domain:MovableEntity . ?a domain:movableEntityId ?obj }");
        
        length = coordinates.length();
        Int half = length / 2;

        i = 0;
        while (i < half) do
            Double lat = coordinates.get(half + i);
            Double long = coordinates.get(i);

            Int index = half - i;
            id = numSmartphonesDomain.get(index - 1);

            MovableEntity smartphone = null;
            Boolean isInside = area.hasPosition(lat, long);

            if (isInside & area.isCriticalArea) then
                smartphone = new MovableEntity(id, lat, long, True);
                print(smartphone.movableEntityId);
                print("Marked to be endangered! Shouldn't be inside a critical area!");
            else
                smartphone = new MovableEntity(id, lat, long, False);
                print(smartphone.movableEntityId);
                print("Marked to be safe!");
            end
            
            i = i + 1;
        end



        // Checking if there are more smartphones added to the asset model manually by an operator which in case the smartphones will not have a position. 
        length = numSmartphonesDomain.length();
        if (i < length) then
            print("---");
            print("Printing the smartphone(s) without a position");
            while (i < length) do
                Int id2 = numSmartphonesDomain.get(i);
                MovableEntity newSmartphone = new MovableEntity(id2, null, null, null);
                print(newSmartphone.movableEntityId);
                print(newSmartphone.latitude);
                print(newSmartphone.longitude);
                print(newSmartphone.endangered);

                i = i + 1;
            end
        end
        


        print("---");
        print("Printing all smartphone(s) as instance(s) of prog:MovableEntity:");
        List<MovableEntity> smartphones = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity }");
        length = smartphones.length();
        i = 0;
        while (i < length) do
            MovableEntity m = smartphones.get(i);

            print(m.movableEntityId);
            print(m.latitude);
            print(m.longitude);
            print(m.endangered);

            i = i + 1;
        end



        print("---");
        print("Can check if smartphones(s) are inside a critical area by using a SPARQL query:");
        print("Smartphones available to check are:");
        i = 0;
        while (i < length) do
            Int movableEntityId = numSmartphonesDomain.get(i);
            print(movableEntityId);
            i = i + 1;
        end

        /*          "Checking which smartphone(s) are in the domain"
        query SELECT ?obj WHERE{ ?obj a domain:MovableEntity }
                    "Checking if smartphone 1 exists"
        query SELECT ?obj WHERE{ ?obj prog:MovableEntity_movableEntityId "1" }
                    "Checking which smartphone(s) are inside a critical area"
        query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered true }
                    "Checking which smartphone(s) are safe"
        query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered false }
                    "Checking if smartphone 2 is endangered"
        query SELECT ?obj ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId "2". ?obj prog:MovableEntity_endangered ?endangered }
                    "Checking smartphone(s), displaying everything and sorting smartphone(s) by ID"
        query SELECT ?id ?latitude ?longitude ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_latitude 
        ?latitude. ?obj prog:MovableEntity_longitude ?longitude. ?obj prog:MovableEntity_endangered ?endangered } ORDER BY ASC(?id)
                    "Checking which smartphone(s) in domain we don't know are endangered or not"
        query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered smol:null }
                    "TODO: Make it possible to manually check if a smartphone is inside a critical area"
        */
        breakpoint;



        print("To manually check if the resulting object(s) correspond(s) with the background knowledge graph, type 'dump' and search in 'output.ttl'!");



        // TODO: Optional to update boolean value 'endangered' in asset model by inserting data with SPARQL query
    


        print("---");
        print("Validating SHACL shapes..");
        Boolean validation = validate("output.ttl");
        print(validation);
    end
end