// Shadow for accessing InfluxDB data in SMOL
class DigitalShadow()
    // Get latitude ranges of areas from InfluxDB
    List<Double> getLatitudes()
        List<Double> areaLatitudes = null;
        areaLatitudes = access(
            "from(bucket: \"Data\")
                |> range(start: -20m)
                |> filter(fn: (r) => r[\"_measurement\"] == \"area\")
                |> filter(fn: (r) => r[\"_field\"] == \"latitude1\" or r[\"_field\"] == \"latitude2\")
                |> filter(fn: (r) => r[\"isCriticalArea\"] == \"true\")
                |> sort(columns: [\"_time\"], desc: true)
                |> unique(column: \"areaId\")
                |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
                |> yield(name: \"first\")",
            INFLUXDB("influx.yml")
        );
        return areaLatitudes;
    end
    
    // Get longitude ranges of areas from InfluxDB
    List<Double> getLongitudes()
        List<Double> areaLongitudes = null;
        areaLongitudes = access(
            "from(bucket: \"Data\")
                |> range(start: -20m)
                |> filter(fn: (r) => r[\"_measurement\"] == \"area\")
                |> filter(fn: (r) => r[\"_field\"] == \"longitude1\" or r[\"_field\"] == \"longitude2\")
                |> filter(fn: (r) => r[\"isCriticalArea\"] == \"true\")
                |> sort(columns: [\"_time\"], desc: true)
                |> unique(column: \"areaId\")
                |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
                |> yield(name: \"first\")",
            INFLUXDB("influx.yml")
        );
        return areaLongitudes;
    end

    // Get newest smartphone coordinates from InfluxDB
    List<Double> getSmartphoneCoordinates()
        List<Double> coordinates = null;
        coordinates = access(
            "from(bucket: \"Data\")
                |> range(start: -20m)
                |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
                |> filter(fn: (r) => r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\")
                |> sort(columns: [\"_time\"], desc: true)
                |> unique(column: \"id\")
                |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
                |> yield(name: \"first\")",
            INFLUXDB("influx.yml")
        );
        return coordinates;
    end

end

class DigitalTwin()

    Unit createCriticalAreas(List<Double> areaLatitudes, List<Double> areaLongitudes)
        List<Int> criticalAreasDomain = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:isCriticalArea 'True'. ?a domain:areaId ?obj }");
        List<Boolean> isCriticalAreasDomain = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:isCriticalArea 'True'. ?a domain:isCriticalArea ?obj }");
        List<String> namesCriticalAreasDomain = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:isCriticalArea 'True'. ?a domain:name ?obj }");
        
        Int length = areaLatitudes.length();
        Int half = length / 2;
        Int i = 0;
        while (i < half) do
            Int temp = half - i;
            Int index = temp - 1;

            Int id = criticalAreasDomain.get(index);
            Boolean isCriticalArea = isCriticalAreasDomain.get(index);
            String name = namesCriticalAreasDomain.get(index);

            Double lat1 = areaLatitudes.get(half + i);
            Double lat2 = areaLatitudes.get(i);
            Double long1 = areaLongitudes.get(half + i);
            Double long2 = areaLongitudes.get(i);

            Area area = new Area(id, name, isCriticalArea, lat1, lat2, long1, long2, null);
            print(area.areaId);

            i = i + 1;
        end
    end



    Int createMovableEntities(List<Int> smartphonesDomain, List<Double> coordinates)
        List<Area> areas = access("SELECT ?obj WHERE{ ?obj a prog:Area }");

        Int length = coordinates.length();
        Int half = length / 2;
        Int i = 0;
        while (i < half) do
            Double lat = coordinates.get(half + i);
            Double long = coordinates.get(i);

            Int index = half - i;
            // We get ID from asset model and not InfluxDB because operator might have added smartphones without a position yet in asset model
            Int id = smartphonesDomain.get(index - 1);

            MovableEntity smartphone = new MovableEntity(id, lat, long, null);
            Area a = null;
            Boolean isInsideACriticalArea = False;

            Int lengthAreas = areas.length();
            Int j = 0;
            // Check if a smartphone is inside any of the critical areas which keep track of which smartphones are inside it
            while (j < lengthAreas) do
                a = areas.get(j);
                isInsideACriticalArea = a.hasPosition(lat, long);
                if (isInsideACriticalArea) then
                    smartphone.endangered = True;
                    a.smartphones = new List<MovableEntity>(smartphone, a.smartphones);
                else
                    smartphone.endangered = False;
                end
                
                j = j + 1;
            end
            if (isInsideACriticalArea) then
                print("Smartphone:");
                print(smartphone.movableEntityId);
                print("Endangered:");
                print(smartphone.endangered);
            end

            i = i + 1;
        end // End of while loop

        return i;
    end // End of function



    Unit printCriticalAreas()
        List<Area> areas = access("SELECT ?obj WHERE{ ?obj a prog:Area }");
        Int length = areas.length();
        Int i = 0;
        while (i < length) do
            print("Area:");
            Area a = areas.get(i);
            print(a.areaId);
            print(a.name);
            print(a.isCriticalArea);
            print(a.latitude1);
            print(a.latitude2);
            print(a.longitude1);
            print(a.longitude2);

            if (a.smartphones != null) then
                Int length2 = a.smartphones.length();
                Int j = 0;
                print("Has smartphone(s):");
                while (j < length2) do
                    MovableEntity next = a.smartphones.get(j);
                    print(next.movableEntityId);

                    j = j + 1;
                end
            end
            print("---");

            i = i + 1;
        end
    end

    Unit createMovableEntitiesWithNoPosition(Int i, Int length, List<Int> smartphonesDomain)
        while (i < length) do
            Int id2 = smartphonesDomain.get(i);
            // Endangered set to False because it can't be determined, hence not True
            MovableEntity newSmartphone = new MovableEntity(id2, null, null, False);
            print(newSmartphone.movableEntityId);
            print(newSmartphone.latitude);
            print(newSmartphone.longitude);
            print(newSmartphone.endangered);

            i = i + 1;
        end
    end 

    Unit printAllMovableEntities(List<MovableEntity> smartphones)
        Int length = smartphones.length();
        Int i = 0;
        while (i < length) do
            MovableEntity m = smartphones.get(i);
            print(m.movableEntityId);
            print(m.latitude);
            print(m.longitude);
            print(m.endangered);

            i = i + 1;
        end
    end

    Unit printVerifiableCheck(Int i, Int length, List<MovableEntity> smartphones)
        Boolean canCheck = False;
        i = 0;
        while (i < length) do
            MovableEntity movableEntity = smartphones.get(i);
            if (movableEntity.latitude != null & movableEntity.longitude != null) then
                canCheck = True;
            end
            i = i + 1;
        end

        if (canCheck) then
            print("---");
            print("6. Smartphone(s) with known position(s) that can be checked:");
            i = 0;
            while (i < length) do
                MovableEntity movableEntity2 = smartphones.get(i);
                if (movableEntity2.latitude != null & movableEntity2.longitude != null) then
                    print(movableEntity2.movableEntityId);
                end
                i = i + 1;
            end
            print("query SELECT ?id ?endangered ?obj WHERE{ ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_endangered ?endangered }");
        else
            print("---");
            print("6. Can query manually with SPARQL:");
        end
    end

    //TODO: Add smartphone to list of smartphones of the critical area it is inside

end

class Area(Int areaId, String name, Boolean isCriticalArea, Double latitude1, Double latitude2, Double longitude1, Double longitude2, List<MovableEntity> smartphones)
    // We are checking if a point (smartphone) is inside an area, assuming its coordinate ranges form a square area where the coordinates align
    Boolean hasPosition(Double lat, Double long)
        Boolean inAnyLatitudeRange = ((lat >= this.latitude1) & (lat <= this.latitude2)) | ((lat >= this.latitude2) & (lat <= this.latitude1));
        Boolean inAnyLongitudeRange = ((long >= this.longitude1 & long <= this.longitude2)) | ((long >= this.longitude2) & (long <= this.longitude1));

        if (inAnyLatitudeRange & inAnyLongitudeRange) then
            return True;
        end
        
        return False;
    end
end

class Door() end

class MovableEntity(Int movableEntityId, Double latitude, Double longitude, Boolean endangered) end

class Wall(Door door) end


main
    DigitalShadow shadow = new DigitalShadow();
    
    List<Double> areaLatitudes = shadow.getLatitudes();
    List<Double> areaLongitudes = shadow.getLongitudes();
    List<Double> coordinates = shadow.getSmartphoneCoordinates();

    DigitalTwin twin = new DigitalTwin();

    Door door = new Door();
    Wall wall = new Wall(door);

    Int i = 0;
    


    // 1. CREATE CRITICAL AREAS
    print("---");
    if (areaLatitudes == null | areaLongitudes == null) then
        print("1. Could not get any critical area(s) from InfluxDB! Check if there are any area(s) in asset model (building.owl), and then restart the server!");
    else
        print("1. Creating critical area(s):");
        twin.createCriticalAreas(areaLatitudes, areaLongitudes);
    end



    List<Int> smartphonesDomain = access("SELECT ?obj WHERE{ ?a a domain:MovableEntity . ?a domain:movableEntityId ?obj }");
    


    // 2. CREATE SMARTPHONES
    print("---");
    if (coordinates == null) then
        print("2. Could not get positions of any smartphones from InfluxDB!");
    else
        if (smartphonesDomain == null) then
            print("2. No smartphone(s) in asset model!");
        else
            print("2. Smartphone(s) with position(s) from InfluxDB:");
            // Variable 'i' to keep track of which smartphone(s) don't have a position
            i = twin.createMovableEntities(smartphonesDomain, coordinates);
        end
    end




    // 3. PRINT CRITICAL AREAS AND ANY ENDANGERED SMARTPHONES INSIDE IT
    print("---");
    print("3. Printing critical area(s) and any endangered smartphone(s) inside it:");
    twin.printCriticalAreas();



    // 4. CREATE ONLY REGISTERED SMARTPHONES THAT HAVE NO POSITION
    Int length = smartphonesDomain.length();
    // Checking if there are more smartphones added to the asset model manually by an operator which in case the smartphones will not have a position.
    if (i < length) then
        print("4. Printing the smartphone(s) without a position");
        twin.createMovableEntitiesWithNoPosition(i, length, smartphonesDomain);
    else
        print("4. All smartphone(s) in domain have a position");
    end



    List<MovableEntity> smartphones = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity. ?obj prog:MovableEntity_movableEntityId ?id } ORDER BY DESC(?id)");



    // 5. PRINTING ALL SMARTPHONES, WITH OR WITHOUT A POSITION
    print("---");
    print("5. Printing all smartphone(s) as instance(s) of prog:MovableEntity:");
    twin.printAllMovableEntities(smartphones);



    // 6. INFORMATION ABOUT SMARTPHONES WITH KNOWN POSITIONS THAT CAN BE VERIFIABLY CHECKED AND HOW
    twin.printVerifiableCheck(i, length, smartphones);

    /*          "Checking which smartphone(s) are in the domain"
    query SELECT ?obj WHERE{ ?obj a domain:MovableEntity }
                "Checking if smartphone 1 exists"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_movableEntityId "1" }
                "Checking which smartphone(s) are inside a critical area and displaying information about them"
    query SELECT ?id ?endangered ?obj WHERE{ ?obj prog:MovableEntity_endangered true. ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_endangered ?endangered }
                "Checking which smartphone(s) are safe"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered false }
                "Checking if smartphone 2 is endangered"
    query SELECT ?obj ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId "2". ?obj prog:MovableEntity_endangered ?endangered }
                "Checking smartphone(s), displaying everything and sorting smartphone(s) by ID"
    query SELECT ?id ?latitude ?longitude ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_latitude 
    ?latitude. ?obj prog:MovableEntity_longitude ?longitude. ?obj prog:MovableEntity_endangered ?endangered } ORDER BY ASC(?id)
                "Checking which smartphone(s) in domain we don't know are endangered or not"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered smol:null }
                "TODO: Make it possible to manually check if a smartphone is inside a critical area"
    */

    breakpoint;


    print("---");
    print("7. Validating SHACL shapes..");
    Boolean validation = validate("output.ttl");
    print(validation);
end