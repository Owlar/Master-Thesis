class Area(Int areaId, String name, Boolean isCriticalArea, Double latitude1, Double latitude2, Double longitude1, Double longitude2)
    // We are checking if a point (smartphone) is inside an area, assuming its coordinate ranges form a square area where the coordinates align
    Boolean hasPosition(Double lat, Double long)
        Boolean inAnyLatitudeRange = ((lat >= this.latitude1) & (lat <= this.latitude2)) | ((lat >= this.latitude2) & (lat <= this.latitude1));
        Boolean inAnyLongitudeRange = ((long >= this.longitude1 & long <= this.longitude2)) | ((long >= this.longitude2) & (long <= this.longitude1));

        if (inAnyLatitudeRange & inAnyLongitudeRange) then
            return True;
        end
        
        return False;
    end
end

class Door() end

class MovableEntity(Int movableEntityId, Double latitude, Double longitude, Boolean endangered) end

class Wall(Door door) end

// Class for accessing InfluxDB in SMOL
class Influx()
    // Get latitude ranges of areas
    List<Double> getLatitudes()
        List<Double> areaLatitudes = null;
        areaLatitudes = access(
            "from(bucket: \"Data\")
                |> range(start: -10m)
                |> filter(fn: (r) => r[\"_measurement\"] == \"area\")
                |> filter(fn: (r) => r[\"_field\"] == \"latitude1\" or r[\"_field\"] == \"latitude2\")
                |> filter(fn: (r) => r[\"isCriticalArea\"] == \"true\")
                |> sort(columns: [\"_time\"], desc: true)
                |> unique(column: \"areaId\")
                |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
                |> yield(name: \"first\")",
            INFLUXDB("influx.yml")
        );
        return areaLatitudes;
    end
    
    // Get longitude ranges of areas
    List<Double> getLongitudes()
        List<Double> areaLongitudes = null;
        areaLongitudes = access(
            "from(bucket: \"Data\")
                |> range(start: -10m)
                |> filter(fn: (r) => r[\"_measurement\"] == \"area\")
                |> filter(fn: (r) => r[\"_field\"] == \"longitude1\" or r[\"_field\"] == \"longitude2\")
                |> filter(fn: (r) => r[\"isCriticalArea\"] == \"true\")
                |> sort(columns: [\"_time\"], desc: true)
                |> unique(column: \"areaId\")
                |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
                |> yield(name: \"first\")",
            INFLUXDB("influx.yml")
        );
        return areaLongitudes;
    end

    List<Double> getSmartphoneCoordinates()
        List<Double> coordinates = null;
        coordinates = access(
            "from(bucket: \"Data\")
                |> range(start: -10m)
                |> filter(fn: (r) => r[\"_measurement\"] == \"data\")
                |> filter(fn: (r) => r[\"_field\"] == \"latitude\" or r[\"_field\"] == \"longitude\")
                |> sort(columns: [\"_time\"], desc: true)
                |> unique(column: \"id\")
                |> aggregateWindow(every: 5m, fn: first, createEmpty: false)
                |> yield(name: \"first\")",
            INFLUXDB("influx.yml")
        );
        return coordinates;
    end

end


main
    Influx influx = new Influx();
    
    List<Double> areaLatitudes = influx.getLatitudes();
    List<Double> areaLongitudes = influx.getLongitudes();

    Door door = new Door();
    Wall wall = new Wall(door);
    
    if (areaLatitudes == null | areaLongitudes == null) then
        print("1. Could not get any critical area(s) from InfluxDB! Try adding areas to asset model and restart server.");
    else
        List<Int> criticalAreasDomain = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:isCriticalArea 'True'. ?a domain:areaId ?obj }");
        List<Boolean> isCriticalAreasDomain = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:isCriticalArea 'True'. ?a domain:isCriticalArea ?obj }");
        List<String> namesCriticalAreasDomain = access("SELECT ?obj WHERE{ ?a a domain:Area. ?a domain:isCriticalArea 'True'. ?a domain:name ?obj }");
        print("1. Critical area(s) with coordinate(s)");
        Int length = areaLatitudes.length();
        Int half = length / 2;
        Int i = 0;
        while (i < half) do
            Int temp = half - i;
            Int index = temp - 1;

            Int id = criticalAreasDomain.get(index);
            Boolean isCriticalArea = isCriticalAreasDomain.get(index);
            String name = namesCriticalAreasDomain.get(index);

            Double lat1 = areaLatitudes.get(half + i);
            Double lat2 = areaLatitudes.get(i);
            Double long1 = areaLongitudes.get(half + i);
            Double long2 = areaLongitudes.get(i);

            // Area.isCriticalArea is set to True because we have previously filtered on critical areas, 
            // and what is a critical area is determined elsewhere by an operator.
            Area area = new Area(id, name, isCriticalArea, lat1, lat2, long1, long2);

            print(area.areaId);
            print(area.name);
            print(area.isCriticalArea);
            print(area.latitude1);
            print(area.latitude2);
            print(area.longitude1);
            print(area.longitude2);

            i = i + 1;
        end
    end


    List<Int> smartphonesDomain = access("SELECT ?obj WHERE{ ?a a domain:MovableEntity . ?a domain:movableEntityId ?obj }");

    // Try get positions from InfluxDB
    List<Double> coordinates = influx.getSmartphoneCoordinates();

    if (coordinates == null) then
        print("2. Could not get positions of any smartphones from InfluxDB!");
        i = 0;
    else
        print("---");
        print("2. Creating smartphone object(s) from asset model and adding position(s) from InfluxDB:");
        
        List<Area> areaz = access("SELECT ?obj WHERE{ ?obj a prog:Area }");

        length = coordinates.length();
        half = length / 2;

        i = 0;
        while (i < half) do
            Double lat = coordinates.get(half + i);
            Double long = coordinates.get(i);

            index = half - i;
            // We get ID from asset model and not InfluxDB because operator might have added smartphones without a position yet in asset model
            id = smartphonesDomain.get(index - 1);

            MovableEntity smartphone = null;
            
            // Checking if a smartphone is already marked to be inside a critical area, in which case it shouldn't change
            Boolean isInsideACriticalArea = False;

            Int lengthAreaz = areaz.length();
            Int j = 0;
            // Checks if a smartphone is inside any of the critical areas
            while (j < lengthAreaz) do
                Area a = areaz.get(j);
                // Can't use a.isCriticalArea because it's a Boolean with double quotation marks around it.
                // Can't currently get Booleans as Booleans and not Strings in SMOL when using access(). 
                // Can't make isCriticalArea a String value either, because that would be weirder
                // There is a single error associated with this, but any other ways have yielded more errors
                if (!isInsideACriticalArea) then
                    isInsideACriticalArea = a.hasPosition(lat, long);
                end
                
                j = j + 1;
            end

            // Marks smartphone to be inside any of the critical areas
            if (isInsideACriticalArea) then
                smartphone = new MovableEntity(id, lat, long, True);
                print(smartphone.movableEntityId);
                print("Marked to be endangered! Shouldn't be inside a critical area!");
            else
                smartphone = new MovableEntity(id, lat, long, False);
                print(smartphone.movableEntityId);
                print("Marked to be safe!");
            end

            i = i + 1;
        end // End of while loop
    end // End of else statement



    // Checking if there are more smartphones added to the asset model manually by an operator which in case the smartphones will not have a position. 
    length = smartphonesDomain.length();
    print("---");
    if (i < length) then
        print("3. Printing the smartphone(s) without a position");
        while (i < length) do
            Int id2 = smartphonesDomain.get(i);
            // Endangered set to False because it can't be determined and therefore not True
            MovableEntity newSmartphone = new MovableEntity(id2, null, null, False);
            print(newSmartphone.movableEntityId);
            print(newSmartphone.latitude);
            print(newSmartphone.longitude);
            print(newSmartphone.endangered);

            i = i + 1;
        end
    else
        print("3. All smartphone(s) in domain have a position");
    end
    



    print("---");
    print("4. Printing all smartphone(s) as instance(s) of prog:MovableEntity:");
    List<MovableEntity> smartphones = access("SELECT ?obj WHERE{ ?obj a prog:MovableEntity. ?obj prog:MovableEntity_movableEntityId ?id } ORDER BY DESC(?id)");
    
    length = smartphones.length();
    i = 0;
    while (i < length) do
        MovableEntity m = smartphones.get(i);
        print(m.movableEntityId);
        print(m.latitude);
        print(m.longitude);
        print(m.endangered);

        i = i + 1;
    end



    Boolean canCheck = False;
    i = 0;
    while (i < length) do
        MovableEntity movableEntity = smartphones.get(i);
        if (movableEntity.latitude != null & movableEntity.longitude != null) then
            canCheck = True;
        end
        i = i + 1;
    end

    if (canCheck) then
        print("---");
        print("5. Smartphone(s) with known position(s) that can be checked:");
        i = 0;
        while (i < length) do
            MovableEntity movableEntity2 = smartphones.get(i);
            if (movableEntity2.latitude != null & movableEntity2.longitude != null) then
                print(movableEntity2.movableEntityId);
            end
            i = i + 1;
        end
        print("query SELECT ?id ?endangered ?obj WHERE{ ?obj prog:MovableEntity_endangered true. ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_endangered ?endangered }");
    else
        print("---");
        print("5. Can query manually with SPARQL:");
    end

    /*          "Checking which smartphone(s) are in the domain"
    query SELECT ?obj WHERE{ ?obj a domain:MovableEntity }
                "Checking if smartphone 1 exists"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_movableEntityId "1" }
                "Checking which smartphone(s) are inside a critical area and displaying information about them"
    query SELECT ?id ?endangered ?obj WHERE{ ?obj prog:MovableEntity_endangered true. ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_endangered ?endangered }
                "Checking which smartphone(s) are safe"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered false }
                "Checking if smartphone 2 is endangered"
    query SELECT ?obj ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId "2". ?obj prog:MovableEntity_endangered ?endangered }
                "Checking smartphone(s), displaying everything and sorting smartphone(s) by ID"
    query SELECT ?id ?latitude ?longitude ?endangered WHERE{ ?obj prog:MovableEntity_movableEntityId ?id. ?obj prog:MovableEntity_latitude 
    ?latitude. ?obj prog:MovableEntity_longitude ?longitude. ?obj prog:MovableEntity_endangered ?endangered } ORDER BY ASC(?id)
                "Checking which smartphone(s) in domain we don't know are endangered or not"
    query SELECT ?obj WHERE{ ?obj prog:MovableEntity_endangered smol:null }
                "TODO: Make it possible to manually check if a smartphone is inside a critical area"
    */
    breakpoint;



    print("6. To manually check if the resulting object(s) correspond(s) with the background knowledge graph, type 'dump' and search for object(s) in 'output.ttl'!");

    print("---");
    print("7. Validating SHACL shapes..");
    Boolean validation = validate("output.ttl");
    print(validation);
end